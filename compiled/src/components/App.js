import CowList from './CowList.js';
import HighlightedCow from './HighlightedCow.js';
import FormView from './FormView.js';
import Parse from '../parse.js';

class App extends React.Component {
  constructor(props) {
    super(props);

    this.state = {
      cows: [],
      currentCow: null
    };

    this.handleFormSubmit = this.handleFormSubmit.bind(this);
    this.handleCowClick = this.handleCowClick.bind(this);
  }

  componentDidMount() {
    this.getCows();
  }

  getCows() {
    var app = this;
    Parse.readAll(function (data) {
      console.log(data);
      app.setState({ cows: data, currentCow: null });
    });
  }

  handleCowClick(cow) {
    console.log('click listener', this, cow);
    this.setState({
      cows: this.state.cows,
      currentCow: cow
    });
    console.log('after state modification', this.state);
  }

  handleFormSubmit() {
    this.getCows();
  }

  render() {
    return React.createElement(
      'div',
      null,
      React.createElement(HighlightedCow, {
        cow: this.state.currentCow
      }),
      React.createElement(FormView, { onSubmit: this.handleFormSubmit }),
      React.createElement(CowList, {
        handleCowClick: this.handleCowClick,
        cows: this.state.cows
      })
    );
  }
}

// In the ES6 spec, files are "modules" and do not share a top-level scope
// `var` declarations will only exist globally where explicitly defined
export default App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0FwcC5qc3giXSwibmFtZXMiOlsiQ293TGlzdCIsIkhpZ2hsaWdodGVkQ293IiwiRm9ybVZpZXciLCJQYXJzZSIsIkFwcCIsIlJlYWN0IiwiQ29tcG9uZW50IiwiY29uc3RydWN0b3IiLCJwcm9wcyIsInN0YXRlIiwiY293cyIsImN1cnJlbnRDb3ciLCJoYW5kbGVGb3JtU3VibWl0IiwiYmluZCIsImhhbmRsZUNvd0NsaWNrIiwiY29tcG9uZW50RGlkTW91bnQiLCJnZXRDb3dzIiwiYXBwIiwicmVhZEFsbCIsImRhdGEiLCJjb25zb2xlIiwibG9nIiwic2V0U3RhdGUiLCJjb3ciLCJyZW5kZXIiXSwibWFwcGluZ3MiOiJBQUFBLE9BQU9BLE9BQVAsTUFBb0IsY0FBcEI7QUFDQSxPQUFPQyxjQUFQLE1BQTJCLHFCQUEzQjtBQUNBLE9BQU9DLFFBQVAsTUFBcUIsZUFBckI7QUFDQSxPQUFPQyxLQUFQLE1BQWtCLGFBQWxCOztBQUVBLE1BQU1DLEdBQU4sU0FBa0JDLE1BQU1DLFNBQXhCLENBQWtDO0FBQ2hDQyxjQUFZQyxLQUFaLEVBQW1CO0FBQ2pCLFVBQU1BLEtBQU47O0FBRUEsU0FBS0MsS0FBTCxHQUFhO0FBQ1hDLFlBQU0sRUFESztBQUVYQyxrQkFBWTtBQUZELEtBQWI7O0FBS0EsU0FBS0MsZ0JBQUwsR0FBd0IsS0FBS0EsZ0JBQUwsQ0FBc0JDLElBQXRCLENBQTJCLElBQTNCLENBQXhCO0FBQ0EsU0FBS0MsY0FBTCxHQUFzQixLQUFLQSxjQUFMLENBQW9CRCxJQUFwQixDQUF5QixJQUF6QixDQUF0QjtBQUNEOztBQUVERSxzQkFBb0I7QUFDbEIsU0FBS0MsT0FBTDtBQUNEOztBQUVEQSxZQUFVO0FBQ1IsUUFBSUMsTUFBTSxJQUFWO0FBQ0FkLFVBQU1lLE9BQU4sQ0FBYyxVQUFTQyxJQUFULEVBQWU7QUFDM0JDLGNBQVFDLEdBQVIsQ0FBWUYsSUFBWjtBQUNBRixVQUFJSyxRQUFKLENBQWEsRUFBQ1osTUFBTVMsSUFBUCxFQUFhUixZQUFZLElBQXpCLEVBQWI7QUFDRCxLQUhEO0FBSUQ7O0FBRURHLGlCQUFlUyxHQUFmLEVBQW9CO0FBQ2xCSCxZQUFRQyxHQUFSLENBQVksZ0JBQVosRUFBOEIsSUFBOUIsRUFBb0NFLEdBQXBDO0FBQ0EsU0FBS0QsUUFBTCxDQUFjO0FBQ1paLFlBQUssS0FBS0QsS0FBTCxDQUFXQyxJQURKO0FBRVpDLGtCQUFXWTtBQUZDLEtBQWQ7QUFJQUgsWUFBUUMsR0FBUixDQUFZLDBCQUFaLEVBQXdDLEtBQUtaLEtBQTdDO0FBQ0Q7O0FBRURHLHFCQUFtQjtBQUNqQixTQUFLSSxPQUFMO0FBQ0Q7O0FBRURRLFdBQVM7QUFDUCxXQUNFO0FBQUE7QUFBQTtBQUNFLDBCQUFDLGNBQUQ7QUFDRSxhQUFLLEtBQUtmLEtBQUwsQ0FBV0U7QUFEbEIsUUFERjtBQUlFLDBCQUFDLFFBQUQsSUFBVSxVQUFVLEtBQUtDLGdCQUF6QixHQUpGO0FBS0UsMEJBQUMsT0FBRDtBQUNFLHdCQUFnQixLQUFLRSxjQUR2QjtBQUVFLGNBQU0sS0FBS0wsS0FBTCxDQUFXQztBQUZuQjtBQUxGLEtBREY7QUFZRDtBQW5EK0I7O0FBc0RsQztBQUNBO0FBQ0EsZUFBZU4sR0FBZiIsImZpbGUiOiJBcHAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQ293TGlzdCBmcm9tICcuL0Nvd0xpc3QuanMnO1xuaW1wb3J0IEhpZ2hsaWdodGVkQ293IGZyb20gJy4vSGlnaGxpZ2h0ZWRDb3cuanMnO1xuaW1wb3J0IEZvcm1WaWV3IGZyb20gJy4vRm9ybVZpZXcuanMnO1xuaW1wb3J0IFBhcnNlIGZyb20gJy4uL3BhcnNlLmpzJztcblxuY2xhc3MgQXBwIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG5cbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgY293czogW10sXG4gICAgICBjdXJyZW50Q293OiBudWxsXG4gICAgfTtcblxuICAgIHRoaXMuaGFuZGxlRm9ybVN1Ym1pdCA9IHRoaXMuaGFuZGxlRm9ybVN1Ym1pdC5iaW5kKHRoaXMpO1xuICAgIHRoaXMuaGFuZGxlQ293Q2xpY2sgPSB0aGlzLmhhbmRsZUNvd0NsaWNrLmJpbmQodGhpcyk7XG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLmdldENvd3MoKTtcbiAgfVxuXG4gIGdldENvd3MoKSB7XG4gICAgdmFyIGFwcCA9IHRoaXM7XG4gICAgUGFyc2UucmVhZEFsbChmdW5jdGlvbihkYXRhKSB7XG4gICAgICBjb25zb2xlLmxvZyhkYXRhKTtcbiAgICAgIGFwcC5zZXRTdGF0ZSh7Y293czogZGF0YSwgY3VycmVudENvdzogbnVsbH0pO1xuICAgIH0pO1xuICB9XG5cbiAgaGFuZGxlQ293Q2xpY2soY293KSB7XG4gICAgY29uc29sZS5sb2coJ2NsaWNrIGxpc3RlbmVyJywgdGhpcywgY293KTtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGNvd3M6dGhpcy5zdGF0ZS5jb3dzLFxuICAgICAgY3VycmVudENvdzpjb3dcbiAgICB9KTtcbiAgICBjb25zb2xlLmxvZygnYWZ0ZXIgc3RhdGUgbW9kaWZpY2F0aW9uJywgdGhpcy5zdGF0ZSk7XG4gIH1cblxuICBoYW5kbGVGb3JtU3VibWl0KCkge1xuICAgIHRoaXMuZ2V0Q293cygpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2PlxuICAgICAgICA8SGlnaGxpZ2h0ZWRDb3dcbiAgICAgICAgICBjb3c9e3RoaXMuc3RhdGUuY3VycmVudENvd31cbiAgICAgICAgLz5cbiAgICAgICAgPEZvcm1WaWV3IG9uU3VibWl0PXt0aGlzLmhhbmRsZUZvcm1TdWJtaXR9PjwvRm9ybVZpZXc+XG4gICAgICAgIDxDb3dMaXN0XG4gICAgICAgICAgaGFuZGxlQ293Q2xpY2s9e3RoaXMuaGFuZGxlQ293Q2xpY2t9XG4gICAgICAgICAgY293cz17dGhpcy5zdGF0ZS5jb3dzfVxuICAgICAgICAvPlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuXG4vLyBJbiB0aGUgRVM2IHNwZWMsIGZpbGVzIGFyZSBcIm1vZHVsZXNcIiBhbmQgZG8gbm90IHNoYXJlIGEgdG9wLWxldmVsIHNjb3BlXG4vLyBgdmFyYCBkZWNsYXJhdGlvbnMgd2lsbCBvbmx5IGV4aXN0IGdsb2JhbGx5IHdoZXJlIGV4cGxpY2l0bHkgZGVmaW5lZFxuZXhwb3J0IGRlZmF1bHQgQXBwO1xuIl19