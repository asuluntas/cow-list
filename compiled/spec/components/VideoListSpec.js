import VideoList from '../../src/components/VideoList.js';
import VideoListEntry from '../../src/components/VideoListEntry.js';

describe('VideoList', function () {
  var { createRenderer } = React.addons.TestUtils;

  // When testing a React component that renders other nested components,
  // it's a common practice to "shallow render" the component, or render
  // only a single level deep. This isolates the component from it's children
  // See more: https://facebook.github.io/react/docs/test-utils.html#shallow-rendering

  it('should be a stateless functional component', function () {
    expect(React.Component.isPrototypeOf(VideoList)).to.be.false;
  });

  it('should render one `VideoListEntry` when given one video', function () {
    var shallowRenderer = createRenderer();

    var oneFakeVideo = window.fakeVideoData.slice(-1);
    shallowRenderer.render(React.createElement(VideoList, { videos: oneFakeVideo }));

    var videoList = shallowRenderer.getRenderOutput();

    expect(videoList.props.children).to.have.length(1);
    videoList.props.children.forEach(child => expect(child.type).to.equal(VideoListEntry));
  });

  it('should render three `VideoListEntry` when given three videos', function () {
    var shallowRenderer = createRenderer();

    var threeFakeVideos = window.fakeVideoData.slice(-3);
    shallowRenderer.render(React.createElement(VideoList, { videos: threeFakeVideos }));

    var videoList = shallowRenderer.getRenderOutput();
    expect(videoList.props.children).to.have.length(3);
    videoList.props.children.forEach(child => expect(child.type).to.equal(VideoListEntry));
  });

  it('should render five `VideoListEntry` when given five videos', function () {
    var shallowRenderer = createRenderer();

    var fiveFakeVideos = window.fakeVideoData.slice(-5);
    shallowRenderer.render(React.createElement(VideoList, { videos: fiveFakeVideos }));

    var videoList = shallowRenderer.getRenderOutput();
    expect(videoList.props.children).to.have.length(5);
    videoList.props.children.forEach(child => expect(child.type).to.equal(VideoListEntry));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NwZWMvY29tcG9uZW50cy9WaWRlb0xpc3RTcGVjLmpzeCJdLCJuYW1lcyI6WyJWaWRlb0xpc3QiLCJWaWRlb0xpc3RFbnRyeSIsImRlc2NyaWJlIiwiY3JlYXRlUmVuZGVyZXIiLCJSZWFjdCIsImFkZG9ucyIsIlRlc3RVdGlscyIsIml0IiwiZXhwZWN0IiwiQ29tcG9uZW50IiwiaXNQcm90b3R5cGVPZiIsInRvIiwiYmUiLCJmYWxzZSIsInNoYWxsb3dSZW5kZXJlciIsIm9uZUZha2VWaWRlbyIsIndpbmRvdyIsImZha2VWaWRlb0RhdGEiLCJzbGljZSIsInJlbmRlciIsInZpZGVvTGlzdCIsImdldFJlbmRlck91dHB1dCIsInByb3BzIiwiY2hpbGRyZW4iLCJoYXZlIiwibGVuZ3RoIiwiZm9yRWFjaCIsImNoaWxkIiwidHlwZSIsImVxdWFsIiwidGhyZWVGYWtlVmlkZW9zIiwiZml2ZUZha2VWaWRlb3MiXSwibWFwcGluZ3MiOiJBQUFBLE9BQU9BLFNBQVAsTUFBc0IsbUNBQXRCO0FBQ0EsT0FBT0MsY0FBUCxNQUEyQix3Q0FBM0I7O0FBRUFDLFNBQVMsV0FBVCxFQUFzQixZQUFXO0FBQy9CLE1BQUksRUFBRUMsY0FBRixLQUFxQkMsTUFBTUMsTUFBTixDQUFhQyxTQUF0Qzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQUMsS0FBRyw0Q0FBSCxFQUFpRCxZQUFXO0FBQzFEQyxXQUFPSixNQUFNSyxTQUFOLENBQWdCQyxhQUFoQixDQUE4QlYsU0FBOUIsQ0FBUCxFQUFpRFcsRUFBakQsQ0FBb0RDLEVBQXBELENBQXVEQyxLQUF2RDtBQUNELEdBRkQ7O0FBSUFOLEtBQUcseURBQUgsRUFBOEQsWUFBVztBQUN2RSxRQUFJTyxrQkFBa0JYLGdCQUF0Qjs7QUFFQSxRQUFJWSxlQUFlQyxPQUFPQyxhQUFQLENBQXFCQyxLQUFyQixDQUEyQixDQUFDLENBQTVCLENBQW5CO0FBQ0FKLG9CQUFnQkssTUFBaEIsQ0FDRSxvQkFBQyxTQUFELElBQVcsUUFBUUosWUFBbkIsR0FERjs7QUFJQSxRQUFJSyxZQUFZTixnQkFBZ0JPLGVBQWhCLEVBQWhCOztBQUVBYixXQUFPWSxVQUFVRSxLQUFWLENBQWdCQyxRQUF2QixFQUFpQ1osRUFBakMsQ0FBb0NhLElBQXBDLENBQXlDQyxNQUF6QyxDQUFnRCxDQUFoRDtBQUNBTCxjQUFVRSxLQUFWLENBQWdCQyxRQUFoQixDQUF5QkcsT0FBekIsQ0FBaUNDLFNBQVNuQixPQUFPbUIsTUFBTUMsSUFBYixFQUFtQmpCLEVBQW5CLENBQXNCa0IsS0FBdEIsQ0FBNEI1QixjQUE1QixDQUExQztBQUNELEdBWkQ7O0FBY0FNLEtBQUcsOERBQUgsRUFBbUUsWUFBVztBQUM1RSxRQUFJTyxrQkFBa0JYLGdCQUF0Qjs7QUFFQSxRQUFJMkIsa0JBQWtCZCxPQUFPQyxhQUFQLENBQXFCQyxLQUFyQixDQUEyQixDQUFDLENBQTVCLENBQXRCO0FBQ0FKLG9CQUFnQkssTUFBaEIsQ0FDRSxvQkFBQyxTQUFELElBQVcsUUFBUVcsZUFBbkIsR0FERjs7QUFJQSxRQUFJVixZQUFZTixnQkFBZ0JPLGVBQWhCLEVBQWhCO0FBQ0FiLFdBQU9ZLFVBQVVFLEtBQVYsQ0FBZ0JDLFFBQXZCLEVBQWlDWixFQUFqQyxDQUFvQ2EsSUFBcEMsQ0FBeUNDLE1BQXpDLENBQWdELENBQWhEO0FBQ0FMLGNBQVVFLEtBQVYsQ0FBZ0JDLFFBQWhCLENBQXlCRyxPQUF6QixDQUFpQ0MsU0FBU25CLE9BQU9tQixNQUFNQyxJQUFiLEVBQW1CakIsRUFBbkIsQ0FBc0JrQixLQUF0QixDQUE0QjVCLGNBQTVCLENBQTFDO0FBQ0QsR0FYRDs7QUFhQU0sS0FBRyw0REFBSCxFQUFpRSxZQUFXO0FBQzFFLFFBQUlPLGtCQUFrQlgsZ0JBQXRCOztBQUVBLFFBQUk0QixpQkFBaUJmLE9BQU9DLGFBQVAsQ0FBcUJDLEtBQXJCLENBQTJCLENBQUMsQ0FBNUIsQ0FBckI7QUFDQUosb0JBQWdCSyxNQUFoQixDQUNFLG9CQUFDLFNBQUQsSUFBVyxRQUFRWSxjQUFuQixHQURGOztBQUlBLFFBQUlYLFlBQVlOLGdCQUFnQk8sZUFBaEIsRUFBaEI7QUFDQWIsV0FBT1ksVUFBVUUsS0FBVixDQUFnQkMsUUFBdkIsRUFBaUNaLEVBQWpDLENBQW9DYSxJQUFwQyxDQUF5Q0MsTUFBekMsQ0FBZ0QsQ0FBaEQ7QUFDQUwsY0FBVUUsS0FBVixDQUFnQkMsUUFBaEIsQ0FBeUJHLE9BQXpCLENBQWlDQyxTQUFTbkIsT0FBT21CLE1BQU1DLElBQWIsRUFBbUJqQixFQUFuQixDQUFzQmtCLEtBQXRCLENBQTRCNUIsY0FBNUIsQ0FBMUM7QUFDRCxHQVhEO0FBWUQsQ0FuREQiLCJmaWxlIjoiVmlkZW9MaXN0U3BlYy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBWaWRlb0xpc3QgZnJvbSAnLi4vLi4vc3JjL2NvbXBvbmVudHMvVmlkZW9MaXN0LmpzJztcbmltcG9ydCBWaWRlb0xpc3RFbnRyeSBmcm9tICcuLi8uLi9zcmMvY29tcG9uZW50cy9WaWRlb0xpc3RFbnRyeS5qcyc7XG5cbmRlc2NyaWJlKCdWaWRlb0xpc3QnLCBmdW5jdGlvbigpIHtcbiAgdmFyIHsgY3JlYXRlUmVuZGVyZXIgfSA9IFJlYWN0LmFkZG9ucy5UZXN0VXRpbHM7XG5cbiAgLy8gV2hlbiB0ZXN0aW5nIGEgUmVhY3QgY29tcG9uZW50IHRoYXQgcmVuZGVycyBvdGhlciBuZXN0ZWQgY29tcG9uZW50cyxcbiAgLy8gaXQncyBhIGNvbW1vbiBwcmFjdGljZSB0byBcInNoYWxsb3cgcmVuZGVyXCIgdGhlIGNvbXBvbmVudCwgb3IgcmVuZGVyXG4gIC8vIG9ubHkgYSBzaW5nbGUgbGV2ZWwgZGVlcC4gVGhpcyBpc29sYXRlcyB0aGUgY29tcG9uZW50IGZyb20gaXQncyBjaGlsZHJlblxuICAvLyBTZWUgbW9yZTogaHR0cHM6Ly9mYWNlYm9vay5naXRodWIuaW8vcmVhY3QvZG9jcy90ZXN0LXV0aWxzLmh0bWwjc2hhbGxvdy1yZW5kZXJpbmdcblxuICBpdCgnc2hvdWxkIGJlIGEgc3RhdGVsZXNzIGZ1bmN0aW9uYWwgY29tcG9uZW50JywgZnVuY3Rpb24oKSB7XG4gICAgZXhwZWN0KFJlYWN0LkNvbXBvbmVudC5pc1Byb3RvdHlwZU9mKFZpZGVvTGlzdCkpLnRvLmJlLmZhbHNlO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHJlbmRlciBvbmUgYFZpZGVvTGlzdEVudHJ5YCB3aGVuIGdpdmVuIG9uZSB2aWRlbycsIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzaGFsbG93UmVuZGVyZXIgPSBjcmVhdGVSZW5kZXJlcigpO1xuXG4gICAgdmFyIG9uZUZha2VWaWRlbyA9IHdpbmRvdy5mYWtlVmlkZW9EYXRhLnNsaWNlKC0xKTtcbiAgICBzaGFsbG93UmVuZGVyZXIucmVuZGVyKFxuICAgICAgPFZpZGVvTGlzdCB2aWRlb3M9e29uZUZha2VWaWRlb30gLz5cbiAgICApO1xuXG4gICAgdmFyIHZpZGVvTGlzdCA9IHNoYWxsb3dSZW5kZXJlci5nZXRSZW5kZXJPdXRwdXQoKTtcblxuICAgIGV4cGVjdCh2aWRlb0xpc3QucHJvcHMuY2hpbGRyZW4pLnRvLmhhdmUubGVuZ3RoKDEpO1xuICAgIHZpZGVvTGlzdC5wcm9wcy5jaGlsZHJlbi5mb3JFYWNoKGNoaWxkID0+IGV4cGVjdChjaGlsZC50eXBlKS50by5lcXVhbChWaWRlb0xpc3RFbnRyeSkpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHJlbmRlciB0aHJlZSBgVmlkZW9MaXN0RW50cnlgIHdoZW4gZ2l2ZW4gdGhyZWUgdmlkZW9zJywgZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNoYWxsb3dSZW5kZXJlciA9IGNyZWF0ZVJlbmRlcmVyKCk7XG5cbiAgICB2YXIgdGhyZWVGYWtlVmlkZW9zID0gd2luZG93LmZha2VWaWRlb0RhdGEuc2xpY2UoLTMpO1xuICAgIHNoYWxsb3dSZW5kZXJlci5yZW5kZXIoXG4gICAgICA8VmlkZW9MaXN0IHZpZGVvcz17dGhyZWVGYWtlVmlkZW9zfSAvPlxuICAgICk7XG5cbiAgICB2YXIgdmlkZW9MaXN0ID0gc2hhbGxvd1JlbmRlcmVyLmdldFJlbmRlck91dHB1dCgpO1xuICAgIGV4cGVjdCh2aWRlb0xpc3QucHJvcHMuY2hpbGRyZW4pLnRvLmhhdmUubGVuZ3RoKDMpO1xuICAgIHZpZGVvTGlzdC5wcm9wcy5jaGlsZHJlbi5mb3JFYWNoKGNoaWxkID0+IGV4cGVjdChjaGlsZC50eXBlKS50by5lcXVhbChWaWRlb0xpc3RFbnRyeSkpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHJlbmRlciBmaXZlIGBWaWRlb0xpc3RFbnRyeWAgd2hlbiBnaXZlbiBmaXZlIHZpZGVvcycsIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzaGFsbG93UmVuZGVyZXIgPSBjcmVhdGVSZW5kZXJlcigpO1xuXG4gICAgdmFyIGZpdmVGYWtlVmlkZW9zID0gd2luZG93LmZha2VWaWRlb0RhdGEuc2xpY2UoLTUpO1xuICAgIHNoYWxsb3dSZW5kZXJlci5yZW5kZXIoXG4gICAgICA8VmlkZW9MaXN0IHZpZGVvcz17Zml2ZUZha2VWaWRlb3N9IC8+XG4gICAgKTtcblxuICAgIHZhciB2aWRlb0xpc3QgPSBzaGFsbG93UmVuZGVyZXIuZ2V0UmVuZGVyT3V0cHV0KCk7XG4gICAgZXhwZWN0KHZpZGVvTGlzdC5wcm9wcy5jaGlsZHJlbikudG8uaGF2ZS5sZW5ndGgoNSk7XG4gICAgdmlkZW9MaXN0LnByb3BzLmNoaWxkcmVuLmZvckVhY2goY2hpbGQgPT4gZXhwZWN0KGNoaWxkLnR5cGUpLnRvLmVxdWFsKFZpZGVvTGlzdEVudHJ5KSk7XG4gIH0pO1xufSk7Il19